name: Library tests

on:
  push:
      branches:
          - main
  pull_request:
      branches:
          - main
jobs:
  windows:
      name: Rust ${{ matrix.RUST_TOOLCHAIN }}
      runs-on: windows-latest
      env:
          RUST_TOOLCHAIN: ${{ matrix.RUST_TOOLCHAIN }}
          RUNNER_OS: "windows"
          CI: "1"
      strategy:
          fail-fast: false
          matrix:
              RUST_TOOLCHAIN: ["stable", "nightly",]
      steps:
          - name: Checkout branch
            uses: actions/checkout@v3
          - name: Install latest Rust ${{ matrix.RUST_TOOLCHAIN }}
            uses: actions-rs/toolchain@v1
            with:
              toolchain: ${{ matrix.RUST_TOOLCHAIN }}
              target: x86_64-pc-windows-msvc
              override: true
              components: rustfmt, clippy
          - name: Install grcov
            if: ${{ matrix.RUST_TOOLCHAIN == 'nightly' }}
            shell: bash -l {0}
            run: cargo install grcov
          - name: Add llvm-tools-preview component
            if: ${{ matrix.RUST_TOOLCHAIN == 'nightly' }}
            shell: bash -l {0}
            run: |
              rustup component add llvm-tools-preview
              echo "CARGO_INCREMENTAL=0"
              echo "RUSTFLAGS=-Zprofile -Ccodegen-units=1 -Copt-level=0 -Clink-dead-code -Coverflow-checks=off -Zpanic_abort_tests -Cpanic=abort"
              echo "RUSTDOCFLAGS=-Cpanic=abort"
              echo "TRACE_NIGHTLY=1" >> $GITHUB_ENV
              echo "LINK=clang_rt.profile-x86_64.lib" >> $GITHUB_ENV
          - name: Cargo lint
            if: ${{ matrix.RUST_TOOLCHAIN == 'stable' }}
            shell: bash -l {0}
            run: cargo clippy
          - name: Cargo build
            shell: bash -l {0}
            run: cargo build -vv
          # - name: Set LLVM_PROFILE_FILE
          #   if: ${{ matrix.RUST_TOOLCHAIN == 'nightly' }}
          #   shell: bash -l {0}
          #   run: echo "LLVM_PROFILE_FILE=force_delete-%p-%m.profraw" >> $GITHUB_ENV
          - name: Cargo test
            shell: bash -l {0}
            run: cargo test
          - name: Gather test coverage
            if: ${{ matrix.RUST_TOOLCHAIN == 'nightly' }}
            shell: bash -l {0}
            run: |
              mkdir cov_files
              find . \( -name "*.gc*" \) -print
              cp $(`find . \( -name "*.gc*" \) -print` | xargs) cov_files
              grcov --binary-path ./cov_files -s . -t lcov --llvm --branch --ignore-not-existing --ignore "/*" -o lcov.info
              ls
          - name: Upload coverage results
            uses: codecov/codecov-action@v3
            with:
              token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos
              files: ./lcov.info # optional
              flags: unittests # optional
              verbose: true # optional (default = false)
              # fail_ci_if_error: true # optional (default = false)
              # name: codecov-umbrella # optional
          # Enable this to get RDP access to the worker.
          # - name: Download
          #   if: ${{ failure() }}
          #   run: Invoke-WebRequest https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-windows-amd64.zip -OutFile ngrok.zip
          # - name: Extract
          #   if: ${{ failure() }}
          #   run: Expand-Archive ngrok.zip
          # - name: Auth
          #   if: ${{ failure() }}
          #   run: .\ngrok\ngrok.exe authtoken 1raaG4z7gsaCRlLw8cRkUWW6ItF_2LWTUFxXwd6UeeJNAAAci
          # - name: Enable TS
          #   if: ${{ failure() }}
          #   run: Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server'-name "fDenyTSConnections" -Value 0
          # - run: Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
          #   if: ${{ failure() }}
          # - run: Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "UserAuthentication" -Value 1
          #   if: ${{ failure() }}
          # - run: Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText "P@ssw0rd!" -Force)
          #   if: ${{ failure() }}
          # - name: Create Tunnel
          #   if: ${{ failure() }}
          #   run: .\ngrok\ngrok.exe tcp 3389
